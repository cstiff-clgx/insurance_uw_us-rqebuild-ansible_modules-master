---
- name: Updating PS security protocol
  win_shell: |
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
  become_method: runas

- name: "Get info for OpenSSH Server"
  win_service:
    name: sshd
  register: service_info

- name: "Remove OpenSSH Server if exists"
  win_service:
    name: sshd
    state: absent
  when: service_info.exists|bool == True

- name: "Download OpenSSH Server"
  win_get_url:
    url: "{{ openssh_server_package }}"
    dest: "{{ temp_dir }}\\{{ openssh_server_name }}"

- name: "UnZip OpenSSH Server"
  win_command: '"C:\\Program Files\\7-Zip\\7z.exe" x {{ temp_dir }}\{{ openssh_server_name }} -oC:\ -y'

- name: "Install OpenSSH Server"
  win_shell: 'C:\OpenSSH-Win64\install-sshd.ps1 >> C:\OpenSSH-Win64\install_log.txt'
  args:
    chdir: 'C:\OpenSSH-Win64\'

- name: Copy ssh config
  ansible.builtin.copy:
    src: 'c:\OpenSSH-Win64\sshd_config_default'
    dest: 'c:\OpenSSH-Win64\sshd_config'
    remote_src: yes

- name: "Start OpenSSH Server service"
  win_service:
    name: sshd
    state: started
    start_mode: auto

- name: visual studio ==> Installed?
  win_stat:
    path: "c:\\VisualStudio2022"
  register: vs_app

- name: Download MS Visual Studio
  win_shell: |
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    Invoke-WebRequest -Uri "https://aka.ms/vs/17/release/vs_professional.exe" -OutFile "{{ temp_dir }}\vs_professional.exe"
  become_method: runas
  when: not vs_app.stat.exists

- name: Install MS Visual Studio with packages
  win_command: '{{ temp_dir }}\vs_professional.exe --passive --wait --norestart --installPath "c:\VisualStudio2022" \
                --includeRecommended
                 --add Microsoft.VisualStudio.Component.CoreEditor \
                 --add Microsoft.VisualStudio.Workload.ManagedDesktop \
                 --add Microsoft.VisualStudio.Workload.NativeCrossPlat
                 --add Microsoft.VisualStudio.Workload.VCTools \
                 --add Microsoft.VisualStudio.Workload.NativeDesktop \
                 --add Microsoft.VisualStudio.Workload.NetWeb \
                 --add Microsoft.NetCore.Component.Runtime.5.0 \
                 --add Microsoft.VisualStudio.Component.ClassDesigner \
                 --add Microsoft.VisualStudio.Component.VC.14.29.16.11.ATL \
                 --add Microsoft.VisualStudio.Component.VC.14.29.16.11.MFC \
                 --add Microsoft.VisualStudio.Component.VC.Redist.MSM \
                 --add Microsoft.VisualStudio.Component.VC.ATLMFC \
                 --add Microsoft.VisualStudio.Component.VC.Llvm.Clang \
                 --add Microsoft.VisualStudio.Component.VC.Llvm.ClangToolset \
                 --add Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Llvm.Clang \
                 --add Component.Linux.CMake \
                 --add Microsoft.VisualStudio.Component.IntelliCode \
                 --add Component.Microsoft.VisualStudio.LiveShare.2022 \
                 --add Microsoft.VisualStudio.Component.NuGet \
                 --add Microsoft.VisualStudio.Component.VC.ASAN \
                 --add Microsoft.VisualStudio.Component.VC.DiagnosticTools \
                 --add Microsoft.VisualStudio.Component.VC.CMake.Project \
                 --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 \
                 --add Microsoft.VisualStudio.Component.VC.ATL \
                 --add Microsoft.VisualStudio.ComponentGroup.VC.Tools.142.x86.x64
                 '
  become_method: runas
  register: vs_pro_rc
  failed_when: vs_pro_rc.rc != 0 and vs_pro_rc.rc != 3010  
  when: not vs_app.stat.exists

- name: Reboot a machine that takes time to settle after being booted
  win_reboot:
    post_reboot_delay: 120

- name: "Download Java OpenJDK"
  win_get_url:
    url: "{{ java_openjdk_package }}"
    dest: "{{ temp_dir }}\\java-openjdk-{{ java_openjdk_version }}.msi"

- name: "Installation Java OpenJDK"
  win_shell: |
    Start-Process msiexec.exe -Wait -ArgumentList '/I {{ temp_dir }}\\java-openjdk-{{ java_openjdk_version }}.msi /qb'
  become_method: runas

- name: "Download Java Oracle JDK"
  win_get_url:
    url: "{{ java_oracle_package }}"
    dest: "{{ temp_dir }}\\java-oracle-{{ java_oracle_version }}.msi"

- name: "Installation Java Oracle JDK"
  win_shell: |
    Start-Process msiexec.exe -Wait -ArgumentList '/I {{ temp_dir }}\\java-oracle-{{ java_oracle_version }}.msi /qb'
  become_method: runas

- name: Set an environment variables
  win_environment:
    state: present
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    level: machine
  with_items: "{{ env_vars }}"

- name: Create firewall rules for development access
  win_firewall_rule:
    name: "{{ item.name}}"
    localport: "{{ item.port}}"
    action: allow
    direction: in
    protocol: "{{ item.protocol}}"
    profiles: domain,private,public
    state: present
    enabled: yes
  loop: "{{ dev_firewall }}"
  loop_control:
    label: "{{ item.name }}"

# - name: "Ensure Eclipse installed"
#   win_chocolatey:
#     name: eclipse-java-oxygen
#     state: present
#   become_method: runas

# - name: "Download STS"
#   win_get_url:
#     url: "{{ sts_url }}"
#     dest: "{{ temp_dir }}\\{{ sts_name }}.zip"

# - name: "UnZip STS"
#   win_command: '"C:\\Program Files\\7-Zip\\7z.exe" x {{ temp_dir }}\{{ sts_name }}.zip -oC:\ -y'

- name: Reboot a machine that takes time to settle after being booted
  win_reboot:
    post_reboot_delay: 120
